// Code generated by counterfeiter. DO NOT EDIT.
package robbersfakes

import (
	"sync"

	"github.com/pizza/robbers"
)

type FakePizzaBandit struct {
	StealAndEatStub        func(p robbers.Pizza)
	stealAndEatMutex       sync.RWMutex
	stealAndEatArgsForCall []struct {
		p robbers.Pizza
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePizzaBandit) StealAndEat(p robbers.Pizza) {
	fake.stealAndEatMutex.Lock()
	fake.stealAndEatArgsForCall = append(fake.stealAndEatArgsForCall, struct {
		p robbers.Pizza
	}{p})
	fake.recordInvocation("StealAndEat", []interface{}{p})
	fake.stealAndEatMutex.Unlock()
	if fake.StealAndEatStub != nil {
		fake.StealAndEatStub(p)
	}
}

func (fake *FakePizzaBandit) StealAndEatCallCount() int {
	fake.stealAndEatMutex.RLock()
	defer fake.stealAndEatMutex.RUnlock()
	return len(fake.stealAndEatArgsForCall)
}

func (fake *FakePizzaBandit) StealAndEatArgsForCall(i int) robbers.Pizza {
	fake.stealAndEatMutex.RLock()
	defer fake.stealAndEatMutex.RUnlock()
	return fake.stealAndEatArgsForCall[i].p
}

func (fake *FakePizzaBandit) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stealAndEatMutex.RLock()
	defer fake.stealAndEatMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePizzaBandit) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ robbers.PizzaBandit = new(FakePizzaBandit)
